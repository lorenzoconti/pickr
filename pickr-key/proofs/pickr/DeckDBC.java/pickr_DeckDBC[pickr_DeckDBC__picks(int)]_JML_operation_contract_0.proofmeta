<?xml version="1.0" encoding="UTF-8"?>
<proofMetaFile proofFileMD5="e41ceee82af3e25b5ef5c2c15b922463" proofClosed="true" proofOutdated="false">
   <markerMessage>
Closed Proof:
pickr.DeckDBC[pickr.DeckDBC::picks(int)].JML operation contract.0

Time: 3.685 s
Nodes: 4572
Branches: 107
   </markerMessage>
   <calledMethods>
      <calledMethod fullQualifiedName="[Lpickr.CardDBC#&lt;createArray&gt;(int)"/>
      <calledMethod fullQualifiedName="[Lpickr.CardDBC#&lt;allocate&gt;(int)"/>
      <calledMethod fullQualifiedName="[Lpickr.CardDBC#&lt;createArrayHelper&gt;()"/>
      <calledMethod fullQualifiedName="[Lpickr.CardDBC#&lt;prepare&gt;()"/>
      <calledMethod fullQualifiedName="java.lang.ArrayIndexOutOfBoundsException#&lt;createObject&gt;()"/>
      <calledMethod fullQualifiedName="java.lang.ArrayIndexOutOfBoundsException#&lt;allocate&gt;()"/>
      <calledMethod fullQualifiedName="java.lang.ArrayIndexOutOfBoundsException#&lt;prepareEnter&gt;()"/>
      <calledMethod fullQualifiedName="java.lang.IndexOutOfBoundsException#&lt;prepare&gt;()"/>
      <calledMethod fullQualifiedName="java.lang.RuntimeException#&lt;prepare&gt;()"/>
      <calledMethod fullQualifiedName="java.lang.Exception#&lt;prepare&gt;()"/>
      <calledMethod fullQualifiedName="java.lang.Throwable#&lt;prepare&gt;()"/>
      <calledMethod fullQualifiedName="java.lang.Object#&lt;prepare&gt;()"/>
      <calledMethod fullQualifiedName="java.lang.IndexOutOfBoundsException#&lt;init&gt;()"/>
      <calledMethod fullQualifiedName="java.lang.RuntimeException#&lt;init&gt;()"/>
      <calledMethod fullQualifiedName="java.lang.Exception#&lt;init&gt;()"/>
      <calledMethod fullQualifiedName="java.lang.Throwable#&lt;init&gt;()"/>
      <calledMethod fullQualifiedName="java.lang.Object#&lt;init&gt;()"/>
   </calledMethods>
   <references rep="pre: {heap=and(and(and(gt(n,Z(0(#))),lt(n,Z(6(#)))),geq(int::select(heap,self,pickr.DeckDBC::$index),n)),java.lang.Object::&lt;inv&gt;(heap,self))}; mby: null; post: {heap=and(imp(equals(exc,null),and(geq(int::select(heap,self,pickr.DeckDBC::$index),Z(0(#))),and(equals(int::select(heap,self,pickr.DeckDBC::$index),javaSubInt(int::select(heapAtPre,self,pickr.DeckDBC::$index),n)),and(java.lang.Object::&lt;inv&gt;(heap,self),nonNull(heap,result,Z(1(#))))))),imp(not(equals(exc,null)),and(imp(equals(java.lang.Throwable::instance(exc),TRUE),java.lang.Object::&lt;inv&gt;(heap,self)),or(equals(java.lang.Error::instance(exc),TRUE),equals(java.lang.RuntimeException::instance(exc),TRUE)))))}; mods: {heap=allLocs, savedHeap=null}; hasMod: {heap=true, savedHeap=true}; termination: diamond; transaction: false">
      <type name="pickr.DeckDBC">
         <axiomReferences>
            <axiomReference kjt="pickr.DeckDBC" name="Class invariant axiom for pickr.DeckDBC" rep="equiv(java.lang.Object::&lt;inv&gt;(heap,self),nonNull(heap,pickr.CardDBC[]::select(heap,self,pickr.DeckDBC::$cards),Z(1(#))))"/>
         </axiomReferences>
         <accessReferences>
            <accessReference kjt="pickr.DeckDBC" name="pickr.DeckDBC::index" type="int" visibility="public" isStatic="false" isFinal="false" initializer=""/>
            <accessReference kjt="pickr.DeckDBC" name="pickr.DeckDBC::cards" type="" visibility="private" isStatic="false" isFinal="false" initializer=""/>
         </accessReferences>
         <inlineMethodReferences>
            <inlineMethodReference kjt="pickr.DeckDBC" name="picks" parameters="int;" src="publicpickr.CardDBC[]picks (int n) {pickr.CardDBC[] picks = new CardDBC[n];if (this.index&gt;=n) {/*//@ loop_invariant (index-i-1 &gt;= 0) &amp;&amp; picks[i] != null;*//*//@ loop_invariant (\forall int j; 0&lt;=j &amp;&amp; j&lt;i; picks[j].num != 0);*/                         for ( int i = 0; i&lt;n; i++ ) {       picks[i]=this.cards[this.index-i-1];     }     this.index-=n;                         return      picks;   }                 else      return  new    CardDBC[ n]; }"/>
         </inlineMethodReferences>
      </type>
   </references>
</proofMetaFile>
